// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portal.Portal.Persistence;

#nullable disable

namespace Portal.Portal.Persistence.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20230508124116_FileType")]
    partial class FileType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroups");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationUsers.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.ComputerSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ComputerSkill");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeFile");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLanguage");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmployeePhoto");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Training")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeTraining");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeUniversity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeUniversity");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmploymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContractTerm")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeAccess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JobStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ResumeId");

                    b.ToTable("EmploymentHistory");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.FormerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("FormerPosition");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.JobInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IdExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("WorkAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobInfo");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.OtherInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AlergiesId")
                        .HasColumnType("int");

                    b.Property<int?>("BloodGroupAndRhesusId")
                        .HasColumnType("int");

                    b.Property<int?>("Conviction")
                        .HasColumnType("int");

                    b.Property<int?>("DrivingLicenseId")
                        .HasColumnType("int");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalCertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlergiesId");

                    b.HasIndex("BloodGroupAndRhesusId");

                    b.HasIndex("DrivingLicenseId");

                    b.HasIndex("MedicalCertificateId");

                    b.ToTable("OtherInformation");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.PayrollBasic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Bank")
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CompanyPension")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EmployeePension")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IncomeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PhysicalPerson")
                        .HasColumnType("int");

                    b.Property<int?>("Retirement")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PayrollBasic");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.PersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PersonalInformation");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmergencyContactId")
                        .HasColumnType("int");

                    b.Property<int?>("EmploymentHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("JobInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("OtherInformationId")
                        .HasColumnType("int");

                    b.Property<int?>("PayrollBasicId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmergencyContactId");

                    b.HasIndex("EmploymentHistoryId");

                    b.HasIndex("JobInfoId");

                    b.HasIndex("OtherInformationId");

                    b.HasIndex("PayrollBasicId");

                    b.HasIndex("PersonalInformationId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Portal.Portal.Application.TimeOffRequestsModule.Models.ChildModels.Redirect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Redirecter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RightOfConfirmation")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeOffRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TimeOffRequestId");

                    b.ToTable("Redirect");
                });

            modelBuilder.Entity("Portal.Portal.Application.TimeOffRequestsModule.Models.ChildModels.TimeOffRequestFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeOffRequestFile");
                });

            modelBuilder.Entity("Portal.Portal.Application.TimeOffRequestsModule.Models.TimeOffRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusChanger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("StatusFileId");

                    b.ToTable("TimeOffRequests");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationUsers.Models.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationRoles.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationUsers.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationUsers.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationRoles.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Portal.Application.ApplicationUsers.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationUsers.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.Permission", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationRoles.Models.PermissionGroup", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.RolePermission", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationRoles.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.ComputerSkill", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", null)
                        .WithMany("ComputerSkills")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeLanguage", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", null)
                        .WithMany("Languages")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeTraining", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", null)
                        .WithMany("Trainings")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeUniversity", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", null)
                        .WithMany("Universities")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmploymentHistory", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeFile", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeFile", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId");

                    b.Navigation("Contract");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.FormerPosition", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", null)
                        .WithMany("FormerPositions")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.OtherInformation", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeFile", "Alergies")
                        .WithMany()
                        .HasForeignKey("AlergiesId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeFile", "BloodGroupAndRhesus")
                        .WithMany()
                        .HasForeignKey("BloodGroupAndRhesusId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeFile", "DrivingLicense")
                        .WithMany()
                        .HasForeignKey("DrivingLicenseId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeeFile", "MedicalCertificate")
                        .WithMany()
                        .HasForeignKey("MedicalCertificateId");

                    b.Navigation("Alergies");

                    b.Navigation("BloodGroupAndRhesus");

                    b.Navigation("DrivingLicense");

                    b.Navigation("MedicalCertificate");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", b =>
                {
                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmergencyContact", "EmergencyContact")
                        .WithMany()
                        .HasForeignKey("EmergencyContactId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmploymentHistory", "EmploymentHistory")
                        .WithMany()
                        .HasForeignKey("EmploymentHistoryId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.JobInfo", "JobInfo")
                        .WithMany()
                        .HasForeignKey("JobInfoId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.OtherInformation", "OtherInformation")
                        .WithMany()
                        .HasForeignKey("OtherInformationId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.PayrollBasic", "PayrollBasic")
                        .WithMany()
                        .HasForeignKey("PayrollBasicId");

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.PersonalInformation", "PersonalInformation")
                        .WithMany()
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Portal.Application.EmployeeServiceModule.Models.ChildModels.EmployeePhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("EmergencyContact");

                    b.Navigation("EmploymentHistory");

                    b.Navigation("JobInfo");

                    b.Navigation("OtherInformation");

                    b.Navigation("PayrollBasic");

                    b.Navigation("PersonalInformation");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Portal.Portal.Application.TimeOffRequestsModule.Models.ChildModels.Redirect", b =>
                {
                    b.HasOne("Portal.Portal.Application.TimeOffRequestsModule.Models.ChildModels.TimeOffRequestFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Portal.Portal.Application.TimeOffRequestsModule.Models.TimeOffRequest", null)
                        .WithMany("Redirects")
                        .HasForeignKey("TimeOffRequestId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Portal.Portal.Application.TimeOffRequestsModule.Models.TimeOffRequest", b =>
                {
                    b.HasOne("Portal.Portal.Application.TimeOffRequestsModule.Models.ChildModels.TimeOffRequestFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Portal.Portal.Application.TimeOffRequestsModule.Models.ChildModels.TimeOffRequestFile", "StatusFile")
                        .WithMany()
                        .HasForeignKey("StatusFileId");

                    b.Navigation("File");

                    b.Navigation("StatusFile");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationUsers.Models.UserRole", b =>
                {
                    b.HasOne("Portal.Portal.Application.ApplicationUsers.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationRoles.Models.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Portal.Portal.Application.ApplicationUsers.Models.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Portal.Portal.Application.EmployeeServiceModule.Models.Employee", b =>
                {
                    b.Navigation("ComputerSkills");

                    b.Navigation("FormerPositions");

                    b.Navigation("Languages");

                    b.Navigation("Trainings");

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("Portal.Portal.Application.TimeOffRequestsModule.Models.TimeOffRequest", b =>
                {
                    b.Navigation("Redirects");
                });
#pragma warning restore 612, 618
        }
    }
}
