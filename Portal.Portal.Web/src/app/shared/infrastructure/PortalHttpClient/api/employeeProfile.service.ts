/**
 * Demo API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddComputerSkillRequest } from '../model/addComputerSkillRequest';
import { AddEmployeeToRoleRequest } from '../model/addEmployeeToRoleRequest';
import { AddFormerPositionRequest } from '../model/addFormerPositionRequest';
import { AddLanguageRequest } from '../model/addLanguageRequest';
import { BanksResponse } from '../model/banksResponse';
import { ContractTypesResponseResult } from '../model/contractTypesResponseResult';
import { DeleteComputerSkillRequest } from '../model/deleteComputerSkillRequest';
import { DeleteEmployeeTrainingyRequest } from '../model/deleteEmployeeTrainingyRequest';
import { DeleteEmployeeUniversityRequest } from '../model/deleteEmployeeUniversityRequest';
import { DeleteFormerPositionRequest } from '../model/deleteFormerPositionRequest';
import { DeleteLanguageRequest } from '../model/deleteLanguageRequest';
import { EditEmployeeJobInfoRequest } from '../model/editEmployeeJobInfoRequest';
import { EditEmployeePayrollBasicRequest } from '../model/editEmployeePayrollBasicRequest';
import { EditEmployeePersonalInformationRequest } from '../model/editEmployeePersonalInformationRequest';
import { EditEmploymentHistoryRequest } from '../model/editEmploymentHistoryRequest';
import { EditFormerPositionRequest } from '../model/editFormerPositionRequest';
import { EditOtherInformationRequest } from '../model/editOtherInformationRequest';
import { EmployeeEducationResponseResult } from '../model/employeeEducationResponseResult';
import { EmployeeJobInfoResponseResult } from '../model/employeeJobInfoResponseResult';
import { EmployeePayrollBasicResponseResult } from '../model/employeePayrollBasicResponseResult';
import { EmployeePersonalInformationResponseResult } from '../model/employeePersonalInformationResponseResult';
import { EmployeeSalaryCalculationResponseResult } from '../model/employeeSalaryCalculationResponseResult';
import { EmploymentHistoryResponseResult } from '../model/employmentHistoryResponseResult';
import { HideEmployeeProfilePhotoRequest } from '../model/hideEmployeeProfilePhotoRequest';
import { IEntityArrayResult } from '../model/iEntityArrayResult';
import { MonthsResponseResult } from '../model/monthsResponseResult';
import { OtherInformationResponseResult } from '../model/otherInformationResponseResult';
import { ParticipationInPension } from '../model/participationInPension';
import { SkillsAndLanguageResponseResult } from '../model/skillsAndLanguageResponseResult';
import { SupervisorEmployeesResponseResult } from '../model/supervisorEmployeesResponseResult';
import { TimeZonesResponse } from '../model/timeZonesResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EmployeeProfileService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileAddcomputerskillPost(body?: AddComputerSkillRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileAddcomputerskillPost(body?: AddComputerSkillRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileAddcomputerskillPost(body?: AddComputerSkillRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileAddcomputerskillPost(body?: AddComputerSkillRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/addcomputerskill`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileAddemployeetorolePost(body?: AddEmployeeToRoleRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileAddemployeetorolePost(body?: AddEmployeeToRoleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileAddemployeetorolePost(body?: AddEmployeeToRoleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileAddemployeetorolePost(body?: AddEmployeeToRoleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/addemployeetorole`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param training 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileAddemployeetrainingPostForm(employeeId?: number, training?: string, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileAddemployeetrainingPostForm(employeeId?: number, training?: string, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileAddemployeetrainingPostForm(employeeId?: number, training?: string, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileAddemployeetrainingPostForm(employeeId?: number, training?: string, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (training !== undefined) {
            formParams = formParams.append('Training', <any>training) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/addemployeetraining`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param university 
     * @param faculty 
     * @param startDate 
     * @param endDate 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileAddemployeeuniversityPostForm(employeeId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileAddemployeeuniversityPostForm(employeeId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileAddemployeeuniversityPostForm(employeeId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileAddemployeeuniversityPostForm(employeeId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (university !== undefined) {
            formParams = formParams.append('University', <any>university) as any || formParams;
        }
        if (faculty !== undefined) {
            formParams = formParams.append('Faculty', <any>faculty) as any || formParams;
        }
        if (startDate !== undefined) {
            formParams = formParams.append('StartDate', <any>startDate) as any || formParams;
        }
        if (endDate !== undefined) {
            formParams = formParams.append('EndDate', <any>endDate) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/addemployeeuniversity`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileAddformerpositionPost(body?: AddFormerPositionRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileAddformerpositionPost(body?: AddFormerPositionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileAddformerpositionPost(body?: AddFormerPositionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileAddformerpositionPost(body?: AddFormerPositionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/addformerposition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileAddlanguagePost(body?: AddLanguageRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileAddlanguagePost(body?: AddLanguageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileAddlanguagePost(body?: AddLanguageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileAddlanguagePost(body?: AddLanguageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/addlanguage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileBanksGet(observe?: 'body', reportProgress?: boolean): Observable<BanksResponse>;
    public apiEmployeeprofileBanksGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BanksResponse>>;
    public apiEmployeeprofileBanksGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BanksResponse>>;
    public apiEmployeeprofileBanksGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BanksResponse>('get',`${this.basePath}/api/employeeprofile/banks`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileContracttypesGet(observe?: 'body', reportProgress?: boolean): Observable<ContractTypesResponseResult>;
    public apiEmployeeprofileContracttypesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContractTypesResponseResult>>;
    public apiEmployeeprofileContracttypesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContractTypesResponseResult>>;
    public apiEmployeeprofileContracttypesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ContractTypesResponseResult>('get',`${this.basePath}/api/employeeprofile/contracttypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileDeletecomputerskillPost(body?: DeleteComputerSkillRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileDeletecomputerskillPost(body?: DeleteComputerSkillRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileDeletecomputerskillPost(body?: DeleteComputerSkillRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileDeletecomputerskillPost(body?: DeleteComputerSkillRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/deletecomputerskill`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileDeleteemployeeprofilephotoPostForm(id?: number, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileDeleteemployeeprofilephotoPostForm(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteemployeeprofilephotoPostForm(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteemployeeprofilephotoPostForm(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (id !== undefined) {
            formParams = formParams.append('Id', <any>id) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/deleteemployeeprofilephoto`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileDeleteemployeetrainingPost(body?: DeleteEmployeeTrainingyRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileDeleteemployeetrainingPost(body?: DeleteEmployeeTrainingyRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteemployeetrainingPost(body?: DeleteEmployeeTrainingyRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteemployeetrainingPost(body?: DeleteEmployeeTrainingyRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/deleteemployeetraining`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileDeleteemployeeuniversityPost(body?: DeleteEmployeeUniversityRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileDeleteemployeeuniversityPost(body?: DeleteEmployeeUniversityRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteemployeeuniversityPost(body?: DeleteEmployeeUniversityRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteemployeeuniversityPost(body?: DeleteEmployeeUniversityRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/deleteemployeeuniversity`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileDeleteformerpositionPost(body?: DeleteFormerPositionRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileDeleteformerpositionPost(body?: DeleteFormerPositionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteformerpositionPost(body?: DeleteFormerPositionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileDeleteformerpositionPost(body?: DeleteFormerPositionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/deleteformerposition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileDeletelanguagePost(body?: DeleteLanguageRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileDeletelanguagePost(body?: DeleteLanguageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileDeletelanguagePost(body?: DeleteLanguageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileDeletelanguagePost(body?: DeleteLanguageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/deletelanguage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditemployeejobinfoPost(body?: EditEmployeeJobInfoRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditemployeejobinfoPost(body?: EditEmployeeJobInfoRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeejobinfoPost(body?: EditEmployeeJobInfoRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeejobinfoPost(body?: EditEmployeeJobInfoRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editemployeejobinfo`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditemployeepayrollbasicPost(body?: EditEmployeePayrollBasicRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditemployeepayrollbasicPost(body?: EditEmployeePayrollBasicRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeepayrollbasicPost(body?: EditEmployeePayrollBasicRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeepayrollbasicPost(body?: EditEmployeePayrollBasicRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editemployeepayrollbasic`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditemployeepersonalinformationPost(body?: EditEmployeePersonalInformationRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditemployeepersonalinformationPost(body?: EditEmployeePersonalInformationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeepersonalinformationPost(body?: EditEmployeePersonalInformationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeepersonalinformationPost(body?: EditEmployeePersonalInformationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editemployeepersonalinformation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param trainingId 
     * @param training 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditemployeetrainingPostForm(employeeId?: number, trainingId?: number, training?: string, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditemployeetrainingPostForm(employeeId?: number, trainingId?: number, training?: string, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeetrainingPostForm(employeeId?: number, trainingId?: number, training?: string, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeetrainingPostForm(employeeId?: number, trainingId?: number, training?: string, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (trainingId !== undefined) {
            formParams = formParams.append('TrainingId', <any>trainingId) as any || formParams;
        }
        if (training !== undefined) {
            formParams = formParams.append('Training', <any>training) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editemployeetraining`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param universityId 
     * @param university 
     * @param faculty 
     * @param startDate 
     * @param endDate 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditemployeeuniversityPostForm(employeeId?: number, universityId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditemployeeuniversityPostForm(employeeId?: number, universityId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeeuniversityPostForm(employeeId?: number, universityId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditemployeeuniversityPostForm(employeeId?: number, universityId?: number, university?: string, faculty?: string, startDate?: Date, endDate?: Date, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (universityId !== undefined) {
            formParams = formParams.append('UniversityId', <any>universityId) as any || formParams;
        }
        if (university !== undefined) {
            formParams = formParams.append('University', <any>university) as any || formParams;
        }
        if (faculty !== undefined) {
            formParams = formParams.append('Faculty', <any>faculty) as any || formParams;
        }
        if (startDate !== undefined) {
            formParams = formParams.append('StartDate', <any>startDate) as any || formParams;
        }
        if (endDate !== undefined) {
            formParams = formParams.append('EndDate', <any>endDate) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editemployeeuniversity`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditemploymenthistoryPost(body?: EditEmploymentHistoryRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditemploymenthistoryPost(body?: EditEmploymentHistoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditemploymenthistoryPost(body?: EditEmploymentHistoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditemploymenthistoryPost(body?: EditEmploymentHistoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editemploymenthistory`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditformerpositionPost(body?: EditFormerPositionRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditformerpositionPost(body?: EditFormerPositionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditformerpositionPost(body?: EditFormerPositionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditformerpositionPost(body?: EditFormerPositionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editformerposition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEditotherinformationPost(body?: EditOtherInformationRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileEditotherinformationPost(body?: EditOtherInformationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileEditotherinformationPost(body?: EditOtherInformationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileEditotherinformationPost(body?: EditOtherInformationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/editotherinformation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEmployeeeducationGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeeEducationResponseResult>;
    public apiEmployeeprofileEmployeeeducationGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeEducationResponseResult>>;
    public apiEmployeeprofileEmployeeeducationGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeEducationResponseResult>>;
    public apiEmployeeprofileEmployeeeducationGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeeEducationResponseResult>('get',`${this.basePath}/api/employeeprofile/employeeeducation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEmployeejobinfoGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeeJobInfoResponseResult>;
    public apiEmployeeprofileEmployeejobinfoGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeJobInfoResponseResult>>;
    public apiEmployeeprofileEmployeejobinfoGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeJobInfoResponseResult>>;
    public apiEmployeeprofileEmployeejobinfoGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeeJobInfoResponseResult>('get',`${this.basePath}/api/employeeprofile/employeejobinfo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEmployeepayrollbasicGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeePayrollBasicResponseResult>;
    public apiEmployeeprofileEmployeepayrollbasicGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeePayrollBasicResponseResult>>;
    public apiEmployeeprofileEmployeepayrollbasicGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeePayrollBasicResponseResult>>;
    public apiEmployeeprofileEmployeepayrollbasicGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeePayrollBasicResponseResult>('get',`${this.basePath}/api/employeeprofile/employeepayrollbasic`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEmployeepersonalinformationGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeePersonalInformationResponseResult>;
    public apiEmployeeprofileEmployeepersonalinformationGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeePersonalInformationResponseResult>>;
    public apiEmployeeprofileEmployeepersonalinformationGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeePersonalInformationResponseResult>>;
    public apiEmployeeprofileEmployeepersonalinformationGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiEmployeeprofileEmployeepersonalinformationGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeePersonalInformationResponseResult>('get',`${this.basePath}/api/employeeprofile/employeepersonalinformation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param retirement 
     * @param netSalary 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEmployeesalarycalculationGet(retirement?: ParticipationInPension, netSalary?: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeeSalaryCalculationResponseResult>;
    public apiEmployeeprofileEmployeesalarycalculationGet(retirement?: ParticipationInPension, netSalary?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeSalaryCalculationResponseResult>>;
    public apiEmployeeprofileEmployeesalarycalculationGet(retirement?: ParticipationInPension, netSalary?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeSalaryCalculationResponseResult>>;
    public apiEmployeeprofileEmployeesalarycalculationGet(retirement?: ParticipationInPension, netSalary?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (retirement !== undefined && retirement !== null) {
            queryParameters = queryParameters.set('Retirement', <any>retirement);
        }
        if (netSalary !== undefined && netSalary !== null) {
            queryParameters = queryParameters.set('NetSalary', <any>netSalary);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeeSalaryCalculationResponseResult>('get',`${this.basePath}/api/employeeprofile/employeesalarycalculation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileEmploymenthistoryGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<EmploymentHistoryResponseResult>;
    public apiEmployeeprofileEmploymenthistoryGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmploymentHistoryResponseResult>>;
    public apiEmployeeprofileEmploymenthistoryGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmploymentHistoryResponseResult>>;
    public apiEmployeeprofileEmploymenthistoryGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmploymentHistoryResponseResult>('get',`${this.basePath}/api/employeeprofile/employmenthistory`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileHideemployeeprofilephotoPost(body?: HideEmployeeProfilePhotoRequest, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileHideemployeeprofilephotoPost(body?: HideEmployeeProfilePhotoRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileHideemployeeprofilephotoPost(body?: HideEmployeeProfilePhotoRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileHideemployeeprofilephotoPost(body?: HideEmployeeProfilePhotoRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/hideemployeeprofilephoto`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileMonthsGet(observe?: 'body', reportProgress?: boolean): Observable<MonthsResponseResult>;
    public apiEmployeeprofileMonthsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MonthsResponseResult>>;
    public apiEmployeeprofileMonthsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MonthsResponseResult>>;
    public apiEmployeeprofileMonthsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MonthsResponseResult>('get',`${this.basePath}/api/employeeprofile/months`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileOtherinformationGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<OtherInformationResponseResult>;
    public apiEmployeeprofileOtherinformationGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OtherInformationResponseResult>>;
    public apiEmployeeprofileOtherinformationGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OtherInformationResponseResult>>;
    public apiEmployeeprofileOtherinformationGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<OtherInformationResponseResult>('get',`${this.basePath}/api/employeeprofile/otherinformation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileSkillsandlanguageGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<SkillsAndLanguageResponseResult>;
    public apiEmployeeprofileSkillsandlanguageGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SkillsAndLanguageResponseResult>>;
    public apiEmployeeprofileSkillsandlanguageGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkillsAndLanguageResponseResult>>;
    public apiEmployeeprofileSkillsandlanguageGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SkillsAndLanguageResponseResult>('get',`${this.basePath}/api/employeeprofile/skillsandlanguage`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileSupervisoremployeesGet(employeeId: number, search?: string, observe?: 'body', reportProgress?: boolean): Observable<SupervisorEmployeesResponseResult>;
    public apiEmployeeprofileSupervisoremployeesGet(employeeId: number, search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SupervisorEmployeesResponseResult>>;
    public apiEmployeeprofileSupervisoremployeesGet(employeeId: number, search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SupervisorEmployeesResponseResult>>;
    public apiEmployeeprofileSupervisoremployeesGet(employeeId: number, search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling apiEmployeeprofileSupervisoremployeesGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (employeeId !== undefined && employeeId !== null) {
            queryParameters = queryParameters.set('EmployeeId', <any>employeeId);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SupervisorEmployeesResponseResult>('get',`${this.basePath}/api/employeeprofile/supervisoremployees`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileTimezonesGet(observe?: 'body', reportProgress?: boolean): Observable<TimeZonesResponse>;
    public apiEmployeeprofileTimezonesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TimeZonesResponse>>;
    public apiEmployeeprofileTimezonesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TimeZonesResponse>>;
    public apiEmployeeprofileTimezonesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TimeZonesResponse>('get',`${this.basePath}/api/employeeprofile/timezones`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param photo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUpdateemployeeprofilephotoPostForm(id?: number, photo?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUpdateemployeeprofilephotoPostForm(id?: number, photo?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUpdateemployeeprofilephotoPostForm(id?: number, photo?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUpdateemployeeprofilephotoPostForm(id?: number, photo?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (id !== undefined) {
            formParams = formParams.append('Id', <any>id) as any || formParams;
        }
        if (photo !== undefined) {
            formParams = formParams.append('Photo', <any>photo) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/updateemployeeprofilephoto`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUploadalergiesPostForm(employeeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUploadalergiesPostForm(employeeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUploadalergiesPostForm(employeeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUploadalergiesPostForm(employeeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/uploadalergies`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUploadbloodgroupandrhesusPostForm(employeeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUploadbloodgroupandrhesusPostForm(employeeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUploadbloodgroupandrhesusPostForm(employeeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUploadbloodgroupandrhesusPostForm(employeeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/uploadbloodgroupandrhesus`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUploadcontractPostForm(employeeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUploadcontractPostForm(employeeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUploadcontractPostForm(employeeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUploadcontractPostForm(employeeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/uploadcontract`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUploaddrivinglicensePostForm(employeeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUploaddrivinglicensePostForm(employeeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUploaddrivinglicensePostForm(employeeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUploaddrivinglicensePostForm(employeeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/uploaddrivinglicense`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUploadiddocumentPostForm(employeeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUploadiddocumentPostForm(employeeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUploadiddocumentPostForm(employeeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUploadiddocumentPostForm(employeeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/uploadiddocument`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUploadmedicalcertificatePostForm(employeeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUploadmedicalcertificatePostForm(employeeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUploadmedicalcertificatePostForm(employeeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUploadmedicalcertificatePostForm(employeeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/uploadmedicalcertificate`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeprofileUploadresumePostForm(employeeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiEmployeeprofileUploadresumePostForm(employeeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiEmployeeprofileUploadresumePostForm(employeeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiEmployeeprofileUploadresumePostForm(employeeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (employeeId !== undefined) {
            formParams = formParams.append('EmployeeId', <any>employeeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/employeeprofile/uploadresume`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
