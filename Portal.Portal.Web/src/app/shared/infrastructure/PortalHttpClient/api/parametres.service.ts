/**
 * Demo API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ContractTypesListResponseResult } from '../model/contractTypesListResponseResult';
import { EmployeesResponseResult } from '../model/employeesResponseResult';
import { GetTimeOffRequestPanelResponseResult } from '../model/getTimeOffRequestPanelResponseResult';
import { GroupsListResponseResult } from '../model/groupsListResponseResult';
import { IEntityArrayResult } from '../model/iEntityArrayResult';
import { UpdateTimeOffRequestPanelRequests } from '../model/updateTimeOffRequestPanelRequests';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ParametresService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresContracttypeslistGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<ContractTypesListResponseResult>;
    public apiParametresContracttypeslistGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContractTypesListResponseResult>>;
    public apiParametresContracttypeslistGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContractTypesListResponseResult>>;
    public apiParametresContracttypeslistGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ContractTypesListResponseResult>('get',`${this.basePath}/api/parametres/contracttypeslist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param contractType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresCreatecontracttypePost(contractType: string, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiParametresCreatecontracttypePost(contractType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiParametresCreatecontracttypePost(contractType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiParametresCreatecontracttypePost(contractType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contractType === null || contractType === undefined) {
            throw new Error('Required parameter contractType was null or undefined when calling apiParametresCreatecontracttypePost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contractType !== undefined && contractType !== null) {
            queryParameters = queryParameters.set('ContractType', <any>contractType);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/parametres/createcontracttype`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param group 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresCreategroupPost(group: string, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiParametresCreategroupPost(group: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiParametresCreategroupPost(group: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiParametresCreategroupPost(group: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling apiParametresCreategroupPost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (group !== undefined && group !== null) {
            queryParameters = queryParameters.set('Group', <any>group);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/parametres/creategroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresDeletecontracttypePost(id: number, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiParametresDeletecontracttypePost(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiParametresDeletecontracttypePost(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiParametresDeletecontracttypePost(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiParametresDeletecontracttypePost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/parametres/deletecontracttype`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresDeletegroupPost(id: number, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiParametresDeletegroupPost(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiParametresDeletegroupPost(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiParametresDeletegroupPost(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiParametresDeletegroupPost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/parametres/deletegroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresDownloademployeeimportfileGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiParametresDownloademployeeimportfileGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiParametresDownloademployeeimportfileGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiParametresDownloademployeeimportfileGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/parametres/downloademployeeimportfile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresEmployeesGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<EmployeesResponseResult>;
    public apiParametresEmployeesGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeesResponseResult>>;
    public apiParametresEmployeesGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeesResponseResult>>;
    public apiParametresEmployeesGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeesResponseResult>('get',`${this.basePath}/api/parametres/employees`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresGettimeoffrequestpanelGet(observe?: 'body', reportProgress?: boolean): Observable<GetTimeOffRequestPanelResponseResult>;
    public apiParametresGettimeoffrequestpanelGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTimeOffRequestPanelResponseResult>>;
    public apiParametresGettimeoffrequestpanelGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTimeOffRequestPanelResponseResult>>;
    public apiParametresGettimeoffrequestpanelGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetTimeOffRequestPanelResponseResult>('get',`${this.basePath}/api/parametres/gettimeoffrequestpanel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresGroupslistGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<GroupsListResponseResult>;
    public apiParametresGroupslistGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupsListResponseResult>>;
    public apiParametresGroupslistGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupsListResponseResult>>;
    public apiParametresGroupslistGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GroupsListResponseResult>('get',`${this.basePath}/api/parametres/groupslist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiParametresUpdatetimeoffrequestpanelPost(body?: UpdateTimeOffRequestPanelRequests, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiParametresUpdatetimeoffrequestpanelPost(body?: UpdateTimeOffRequestPanelRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiParametresUpdatetimeoffrequestpanelPost(body?: UpdateTimeOffRequestPanelRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiParametresUpdatetimeoffrequestpanelPost(body?: UpdateTimeOffRequestPanelRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/parametres/updatetimeoffrequestpanel`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
