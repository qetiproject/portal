/**
 * Demo API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AllNonComplianceDetailsResponseResult } from '../model/allNonComplianceDetailsResponseResult';
import { AllNonCompliancesResponseResult } from '../model/allNonCompliancesResponseResult';
import { EmployeesResponseResult } from '../model/employeesResponseResult';
import { GroupsListResponseResult } from '../model/groupsListResponseResult';
import { IEntityArrayResult } from '../model/iEntityArrayResult';
import { MyNonComplianceDetailsResponseResult } from '../model/myNonComplianceDetailsResponseResult';
import { MyNonCompliancesResponseResult } from '../model/myNonCompliancesResponseResult';
import { NonComplianceStatus } from '../model/nonComplianceStatus';
import { ReceivedNonComplianceDetailsResponseResult } from '../model/receivedNonComplianceDetailsResponseResult';
import { ReceivedNonCompliancesResponseResult } from '../model/receivedNonCompliancesResponseResult';
import { SentNonComplianceDetailsResponseResult } from '../model/sentNonComplianceDetailsResponseResult';
import { SentNonCompliancesResponseResult } from '../model/sentNonCompliancesResponseResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NonComplianceService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param number 
     * @param comment 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceAddnoncompliancecommentPostForm(number?: string, comment?: string, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiNoncomplianceAddnoncompliancecommentPostForm(number?: string, comment?: string, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiNoncomplianceAddnoncompliancecommentPostForm(number?: string, comment?: string, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiNoncomplianceAddnoncompliancecommentPostForm(number?: string, comment?: string, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (number !== undefined) {
            formParams = formParams.append('Number', <any>number) as any || formParams;
        }
        if (comment !== undefined) {
            formParams = formParams.append('Comment', <any>comment) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/noncompliance/addnoncompliancecomment`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param number 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceAllnoncompliancedetailsGet(number: string, observe?: 'body', reportProgress?: boolean): Observable<AllNonComplianceDetailsResponseResult>;
    public apiNoncomplianceAllnoncompliancedetailsGet(number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceAllnoncompliancedetailsGet(number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceAllnoncompliancedetailsGet(number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling apiNoncomplianceAllnoncompliancedetailsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('Number', <any>number);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AllNonComplianceDetailsResponseResult>('get',`${this.basePath}/api/noncompliance/allnoncompliancedetails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceAllnoncompliancesGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<AllNonCompliancesResponseResult>;
    public apiNoncomplianceAllnoncompliancesGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllNonCompliancesResponseResult>>;
    public apiNoncomplianceAllnoncompliancesGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllNonCompliancesResponseResult>>;
    public apiNoncomplianceAllnoncompliancesGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AllNonCompliancesResponseResult>('get',`${this.basePath}/api/noncompliance/allnoncompliances`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param number 
     * @param status 
     * @param comment 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceChangenoncompliancestatusPostForm(number?: string, status?: NonComplianceStatus, comment?: string, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiNoncomplianceChangenoncompliancestatusPostForm(number?: string, status?: NonComplianceStatus, comment?: string, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiNoncomplianceChangenoncompliancestatusPostForm(number?: string, status?: NonComplianceStatus, comment?: string, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiNoncomplianceChangenoncompliancestatusPostForm(number?: string, status?: NonComplianceStatus, comment?: string, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (number !== undefined) {
            formParams = formParams.append('Number', <any>number) as any || formParams;
        }
        if (status !== undefined) {
            formParams = formParams.append('Status', <any>status) as any || formParams;
        }
        if (comment !== undefined) {
            formParams = formParams.append('Comment', <any>comment) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/noncompliance/changenoncompliancestatus`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param title 
     * @param violator 
     * @param approvalDeadline 
     * @param fine 
     * @param file 
     * @param description 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceCreatenoncompliancePostForm(title?: string, violator?: string, approvalDeadline?: string, fine?: number, file?: Blob, description?: string, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiNoncomplianceCreatenoncompliancePostForm(title?: string, violator?: string, approvalDeadline?: string, fine?: number, file?: Blob, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiNoncomplianceCreatenoncompliancePostForm(title?: string, violator?: string, approvalDeadline?: string, fine?: number, file?: Blob, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiNoncomplianceCreatenoncompliancePostForm(title?: string, violator?: string, approvalDeadline?: string, fine?: number, file?: Blob, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (title !== undefined) {
            formParams = formParams.append('Title', <any>title) as any || formParams;
        }
        if (violator !== undefined) {
            formParams = formParams.append('Violator', <any>violator) as any || formParams;
        }
        if (approvalDeadline !== undefined) {
            formParams = formParams.append('ApprovalDeadline', <any>approvalDeadline) as any || formParams;
        }
        if (fine !== undefined) {
            formParams = formParams.append('Fine', <any>fine) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }
        if (description !== undefined) {
            formParams = formParams.append('Description', <any>description) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/noncompliance/createnoncompliance`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param nonComplianceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceEmployeesGet(search?: string, nonComplianceId?: string, observe?: 'body', reportProgress?: boolean): Observable<EmployeesResponseResult>;
    public apiNoncomplianceEmployeesGet(search?: string, nonComplianceId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeesResponseResult>>;
    public apiNoncomplianceEmployeesGet(search?: string, nonComplianceId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeesResponseResult>>;
    public apiNoncomplianceEmployeesGet(search?: string, nonComplianceId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }
        if (nonComplianceId !== undefined && nonComplianceId !== null) {
            queryParameters = queryParameters.set('NonComplianceId', <any>nonComplianceId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeesResponseResult>('get',`${this.basePath}/api/noncompliance/employees`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceGroupslistGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<GroupsListResponseResult>;
    public apiNoncomplianceGroupslistGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupsListResponseResult>>;
    public apiNoncomplianceGroupslistGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupsListResponseResult>>;
    public apiNoncomplianceGroupslistGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GroupsListResponseResult>('get',`${this.basePath}/api/noncompliance/groupslist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param number 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceMynoncompliancedetailsGet(number: string, observe?: 'body', reportProgress?: boolean): Observable<MyNonComplianceDetailsResponseResult>;
    public apiNoncomplianceMynoncompliancedetailsGet(number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MyNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceMynoncompliancedetailsGet(number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MyNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceMynoncompliancedetailsGet(number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling apiNoncomplianceMynoncompliancedetailsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('Number', <any>number);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MyNonComplianceDetailsResponseResult>('get',`${this.basePath}/api/noncompliance/mynoncompliancedetails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceMynoncompliancesGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<MyNonCompliancesResponseResult>;
    public apiNoncomplianceMynoncompliancesGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MyNonCompliancesResponseResult>>;
    public apiNoncomplianceMynoncompliancesGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MyNonCompliancesResponseResult>>;
    public apiNoncomplianceMynoncompliancesGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MyNonCompliancesResponseResult>('get',`${this.basePath}/api/noncompliance/mynoncompliances`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param number 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceReceivednoncompliancedetailsGet(number: string, observe?: 'body', reportProgress?: boolean): Observable<ReceivedNonComplianceDetailsResponseResult>;
    public apiNoncomplianceReceivednoncompliancedetailsGet(number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReceivedNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceReceivednoncompliancedetailsGet(number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReceivedNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceReceivednoncompliancedetailsGet(number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling apiNoncomplianceReceivednoncompliancedetailsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('Number', <any>number);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ReceivedNonComplianceDetailsResponseResult>('get',`${this.basePath}/api/noncompliance/receivednoncompliancedetails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceReceivednoncompliancesGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<ReceivedNonCompliancesResponseResult>;
    public apiNoncomplianceReceivednoncompliancesGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReceivedNonCompliancesResponseResult>>;
    public apiNoncomplianceReceivednoncompliancesGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReceivedNonCompliancesResponseResult>>;
    public apiNoncomplianceReceivednoncompliancesGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ReceivedNonCompliancesResponseResult>('get',`${this.basePath}/api/noncompliance/receivednoncompliances`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param number 
     * @param receiver 
     * @param file 
     * @param comment 
     * @param statusChange 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceRedirectnoncompliancePostForm(number?: string, receiver?: string, file?: Blob, comment?: string, statusChange?: boolean, observe?: 'body', reportProgress?: boolean): Observable<IEntityArrayResult>;
    public apiNoncomplianceRedirectnoncompliancePostForm(number?: string, receiver?: string, file?: Blob, comment?: string, statusChange?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEntityArrayResult>>;
    public apiNoncomplianceRedirectnoncompliancePostForm(number?: string, receiver?: string, file?: Blob, comment?: string, statusChange?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEntityArrayResult>>;
    public apiNoncomplianceRedirectnoncompliancePostForm(number?: string, receiver?: string, file?: Blob, comment?: string, statusChange?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (number !== undefined) {
            formParams = formParams.append('Number', <any>number) as any || formParams;
        }
        if (receiver !== undefined) {
            formParams = formParams.append('Receiver', <any>receiver) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }
        if (comment !== undefined) {
            formParams = formParams.append('Comment', <any>comment) as any || formParams;
        }
        if (statusChange !== undefined) {
            formParams = formParams.append('StatusChange', <any>statusChange) as any || formParams;
        }

        return this.httpClient.request<IEntityArrayResult>('post',`${this.basePath}/api/noncompliance/redirectnoncompliance`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param number 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceSentnoncompliancedetailsGet(number: string, observe?: 'body', reportProgress?: boolean): Observable<SentNonComplianceDetailsResponseResult>;
    public apiNoncomplianceSentnoncompliancedetailsGet(number: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SentNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceSentnoncompliancedetailsGet(number: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SentNonComplianceDetailsResponseResult>>;
    public apiNoncomplianceSentnoncompliancedetailsGet(number: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling apiNoncomplianceSentnoncompliancedetailsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('Number', <any>number);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SentNonComplianceDetailsResponseResult>('get',`${this.basePath}/api/noncompliance/sentnoncompliancedetails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiNoncomplianceSentnoncompliancesGet(search?: string, observe?: 'body', reportProgress?: boolean): Observable<SentNonCompliancesResponseResult>;
    public apiNoncomplianceSentnoncompliancesGet(search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SentNonCompliancesResponseResult>>;
    public apiNoncomplianceSentnoncompliancesGet(search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SentNonCompliancesResponseResult>>;
    public apiNoncomplianceSentnoncompliancesGet(search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('Search', <any>search);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SentNonCompliancesResponseResult>('get',`${this.basePath}/api/noncompliance/sentnoncompliances`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
